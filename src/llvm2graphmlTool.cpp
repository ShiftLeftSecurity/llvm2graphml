#include "BitcodeLoader.h"
#include "Builder.h"
#include "Emitter.h"
#include "FileType.h"
#include "GraphmlWriter.h"
#include "Logger.h"
#include "Version.h"
#include <llvm/Support/CommandLine.h>
#include <sstream>
#include <string>
#include <unordered_map>

llvm::cl::OptionCategory llvm2graphmlCategory("llvm2graphml");

llvm::cl::list<std::string> BitcodePaths(llvm::cl::Positional, llvm::cl::OneOrMore,
                                         llvm::cl::desc("Bitcode files"),
                                         llvm::cl::cat(llvm2graphmlCategory));

llvm::cl::opt<std::string>
    OutputDirectory("output-dir", llvm::cl::Optional,
                    llvm::cl::desc("Where to store llvm.graphml.xml (defaults to '.')"),
                    llvm::cl::cat(llvm2graphmlCategory), llvm::cl::init("."));

llvm::cl::opt<std::string>
    OutputName("output-name", llvm::cl::Optional,
               llvm::cl::desc("Output filename (defaults to 'llvm.graphml.xml')"),
               llvm::cl::cat(llvm2graphmlCategory), llvm::cl::init("llvm.graphml.xml"));

llvm::cl::opt<std::string>
    Output("output", llvm::cl::Optional,
           llvm::cl::desc("Output file path. Overrides --output-dir and --output-name"),
           llvm::cl::cat(llvm2graphmlCategory));

using namespace llvm2graphml;

int main(int argc, char **argv) {
  llvm::cl::SetVersionPrinter(llvm2graphml::printVersionInformationStream);
  llvm::cl::HideUnrelatedOptions(llvm2graphmlCategory);
  llvm::cl::ParseCommandLineOptions(argc, argv);

  Logger logger;
  logger.uiInfo(std::string("More details: ") + logger.getLogPath());

  std::stringstream logIntro;
  logIntro << "Generated by llvm2graphml (" << llvm2graphml::llvm2graphmlVersionString() << " / "
           << llvm2graphml::llvm2graphmlCommitString() << ")";
  logger.logInfo(logIntro.str());

  BitcodeLoader loader(logger);
  std::vector<std::unique_ptr<llvm::Module>> modules;

  for (size_t i = 0; i < BitcodePaths.size(); i++) {
    std::string path = BitcodePaths[i];
    logger.uiInfo(std::string("Loading ") + path);
    FileType type = getFileType(logger, path);
    switch (type) {
    case FileType::Unsupported: {
      logger.logWarning(std::string("Skipping unsupported file ") + path);
    } break;
    case FileType::Bitcode: {
      logger.logInfo(std::string("Parsing bitcode file ") + path);
      std::unique_ptr<llvm::Module> module = loader.loadBitcode(path);
      modules.push_back(std::move(module));
    } break;
    case FileType::Binary: {
      logger.logInfo(std::string("Attempting to extract bitcode from ") + path);
      for (std::unique_ptr<llvm::Module> &module : loader.extractBitcode(path)) {
        modules.push_back(std::move(module));
      }
    } break;
    case FileType::LLVM_IR: {
      logger.logInfo(std::string("Parsing IR file ") + path);
      std::unique_ptr<llvm::Module> module = loader.loadIR(path);
      if (module) {
        modules.push_back(std::move(module));
      }
    } break;
    }
  }

  std::string output = Output.getValue();
  if (output.empty()) {
    output = OutputDirectory.getValue() + '/' + OutputName.getValue();
  }

  Builder builder;
  Emitter emitter(builder);

  for (std::unique_ptr<llvm::Module> &module : modules) {
    emitter.emit(module.get());
  }

  GraphmlWriter writer;
  writer.saveGraph(builder, output);

  logger.uiInfo(std::string("Saved result into ") + output);
  logger.uiInfo("Shutting down");
  return 0;
}
